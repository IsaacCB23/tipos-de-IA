# -*- coding: utf-8 -*-
"""IAGeneral

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lnGOayKLhmkVJHO4JTIBtwlTj4tFXzzA
"""

!pip install nltk requests
!pip install requests

import nltk
import requests
from nltk.chat.util import Chat, reflections

# Configuración inicial para NLTK (descarga datos necesarios)
nltk.download('punkt')

# Función para obtener información meteorológica
def get_weather_mexico(zip_code, api_key="cfaf6a32cfc3f0f5291e8bc5ceeef26d"):
    try:
        # Obtener coordenadas de geolocalización a partir del código postal
        geo_url = f"http://api.openweathermap.org/geo/1.0/zip?zip={zip_code},MX&appid={api_key}"
        geo_response = requests.get(geo_url)

        if geo_response.status_code != 200:
            return f"Error al obtener la geolocalización del código postal: {geo_response.status_code} - {geo_response.text}"

        geo_data = geo_response.json()
        lat, lon = geo_data["lat"], geo_data["lon"]

        # Obtener clima utilizando las coordenadas
        weather_url = f"https://api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}&appid={api_key}&units=metric"
        weather_response = requests.get(weather_url)

        if weather_response.status_code != 200:
            return f"Error al obtener los datos del clima: {weather_response.status_code} - {weather_response.text}"

        weather_data = weather_response.json()
        weather_info = (
            f"Clima actual en {geo_data['name']}:\n"
            f"- Temperatura: {weather_data['main']['temp']}°C\n"
            f"- Sensación térmica: {weather_data['main']['feels_like']}°C\n"
            f"- Humedad: {weather_data['main']['humidity']}%\n"
            f"- Descripción: {weather_data['weather'][0]['description'].capitalize()}"
        )
        return weather_info
    except Exception as e:
        return f"Error inesperado: {str(e)}"


# Función para realizar cálculos matemáticos
def simple_math(expression):
    try:
        result = eval(expression)
        return f"El resultado de la operación '{expression}' es: {result}"
    except Exception:
        return "Hubo un error al calcular. Por favor, verifica tu expresión matemática."

# Respuestas comunes
pairs = [
    (r"hola|buenas|qué tal", ["¡Hola! ¿En qué puedo ayudarte?"]),
    (r"¿cómo estás\??", ["¡Estoy listo para ayudarte!"]),
    (r"¿cuál es tu nombre\??", ["Soy tu asistente virtual."]),
    (r"clima en (\d{5})", ["%(custom_response)s"]),
    (r"(calcula|cuanto es) (.+)", ["%(custom_response)s"]),
    (r"adiós|chau|hasta luego", ["¡Hasta luego! ¡Fue un placer ayudarte!"]),
]

# Función para manejar respuestas personalizadas
def process_response(user_input):
    for pattern, responses in pairs:
        match = nltk.re.search(pattern, user_input)  # Usamos re.search() para mayor flexibilidad
        if match:
            if "%(custom_response)s" in responses:
                # Respuesta dinámica basada en funciones
                if "clima en" in user_input:
                    zip_code = match.group(1)
                    return get_weather_mexico(zip_code)
                elif "calcula" in user_input or "cuanto es" in user_input:  # Verifica ambas expresiones
                    # Verificar si match.group(2) existe y es válido
                    if match.group(2):  # Asegura que el segundo grupo contenga la expresión matemática
                        expression = match.group(2).strip()  # Captura la expresión matemática
                        return simple_math(expression)
                    else:
                        return "No pude entender la expresión matemática. ¿Podrías reformularla?"
            else:
                # Respuesta estática
                return responses[0]
    return "Lo siento, no entendí eso. ¿Podrías reformularlo?"

# Asistente utilizando lógica personalizada
def virtual_assistant():
    print("Asistente Virtual: ¡Hola! ¿En qué puedo ayudarte? Escribe 'adiós' para salir.")
    while True:
        user_input = input("Tú: ").strip().lower()
        if user_input in ["adiós", "chau", "hasta luego"]:
            print("Asistente Virtual: ¡Hasta luego! ¡Fue un placer ayudarte!")
            break
        response = process_response(user_input)
        print(f"Asistente Virtual: {response}")

# Ejecutar el asistente
if __name__ == "__main__":
    virtual_assistant()